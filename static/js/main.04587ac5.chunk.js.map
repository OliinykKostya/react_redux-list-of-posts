{"version":3,"sources":["store/loading.ts","store/loaded.ts","store/message.ts","store/posts.ts","store/sortedPosts.tsx","helpers/api.ts","store/index.ts","components/CommentItem.tsx","components/CommentList.tsx","components/UserItem.tsx","components/Post.tsx","components/PostList.tsx","components/Start.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","loaded","setMessage","message","posts","sortedPosts","filter","item","title","includes","event","body","getAll","url","fetch","then","response","json","rootReducer","combineReducers","loadingReducer","messageReducer","postsReducer","sortedPostsReducer","loadedReducer","isLoading","state","getMessage","getPosts","getSortedPosts","getIsLoaded","store","createStore","composeWithDevTools","applyMiddleware","thunk","CommentItem","comment","name","email","CommentList","comments","map","className","key","id","UserItem","user","address","street","suite","city","zipcode","Post","post","PostList","dispatch","useDispatch","useSelector","onChange","text","target","value","setSortedPosts","placeholder","length","Start","onClick","a","postFromServer","userFromServer","commentsFromServer","preperedListOfPosts","find","itemId","userId","postId","disabled","App","Root","ReactDOM","render","document","getElementById"],"mappings":"gUAqBeA,EAbC,WAAyC,IAAxCC,EAAuC,wDAAtBC,EAAsB,uCACtD,OAAQA,EAAOC,MACb,IARkB,gBAShB,OAAO,EAET,IAVmB,iBAWjB,OAAO,EAET,QACE,OAAOF,ICIED,EAbC,WAAwC,IAAvCI,EAAsC,wDAAtBF,EAAsB,uCACrD,OAAQA,EAAOC,MACb,IARc,WASZ,OAAO,EAET,IAVkB,YAWhB,OAAO,EAET,QACE,OAAOC,ICbAC,EAAa,SAACC,GAAD,MAAsB,CAAEH,KAF9B,cAEiDG,YAWtDN,EATC,WAAsC,IAArCM,EAAoC,uDAA1B,GAAIJ,EAAsB,uCACnD,OAAQA,EAAOC,MACb,IANgB,cAOd,OAAOD,EAAOI,QAChB,QACE,OAAOA,ICKEN,EAVC,WAAoC,IAAnCO,EAAkC,uDAA1B,GAAIL,EAAsB,uCACjD,OAAQA,EAAOC,MACb,IANc,YAOZ,OAAOD,EAAOK,MAEhB,QACE,OAAOA,ICQEP,EAZC,WAA0C,IAAzCQ,EAAwC,uDAA1B,GAAIN,EAAsB,uCACvD,OAAQA,EAAOC,MACb,IARqB,mBASnB,OAAOD,EAAOK,MACXE,QAAO,SAACC,GAAD,OAAeA,EAAKC,MAAMC,SAASV,EAAOW,QAC7CH,EAAKI,KAAKF,SAASV,EAAOW,UAEnC,QACE,OAAOL,ICZPO,EAAS,SAAIC,GACjB,OAAOC,MAHM,iEAGSD,GACnBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCMzBC,EAAcC,0BAAgB,CAClCrB,QAASsB,EACTjB,QAASkB,EACTjB,MAAOkB,EACPjB,YAAakB,EACbtB,OAAQuB,IAKGC,EAAY,SAACC,GAAD,OAAsBA,EAAM5B,SACxC6B,EAAa,SAACD,GAAD,OAAsBA,EAAMvB,SACzCyB,EAAW,SAACF,GAAD,OAAsBA,EAAMtB,OACvCyB,EAAiB,SAACH,GAAD,OAAsBA,EAAMrB,aAC7CyB,EAAc,SAACJ,GAAD,OAAsBA,EAAMzB,QAkCxC8B,EALDC,sBACZd,EACAe,8BAAoBC,0BAAgBC,OCrCvBC,EAbsB,SAAC,GAAwC,IAAD,IAArCC,QAAWC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAO5B,EAAa,EAAbA,KAC9D,OACE,oCACE,2BAAI2B,GACJ,2BACGC,EACA,KAEH,2BAAI5B,KCQK6B,EAfsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtC,OACE,oCACE,4BACGA,EAASC,KAAI,SAAAL,GAAO,OACnB,wBAAIM,UAAU,aAAaC,IAAKP,EAAQQ,IACtC,kBAAC,EAAD,CAAaR,QAASA,WCYnBS,EApBmB,SAAC,GAAwC,IAAD,IAArCC,KAAQT,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOS,EAAgB,EAAhBA,QACxD,OACE,oCACE,2BACGV,EACA,IACAC,EACA,IACAS,EAAQC,OACR,IACAD,EAAQE,MACR,IACAF,EAAQG,KACR,IACAH,EAAQI,WCAFC,EAXe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,oCACE,4BAAKA,EAAK9C,OACV,2BAAI8C,EAAK3C,MACT,kBAAC,EAAD,CAAUoC,KAAMO,EAAKP,OACrB,kBAAC,EAAD,CAAaN,SAAUa,EAAKb,aC2BnBc,EApCE,WACf,IAAMC,EAAWC,cACXrD,EAAQsD,YAAY9B,GACpBvB,EAAcqD,YAAY7B,GAQhC,OACE,oCACE,2BACE7B,KAAK,OACL2D,SAVY,SAACjD,GACjB,IAAMkD,EAAOlD,EAAMmD,OAAOC,MAE1BN,EPV0B,SAACpD,EAAYM,GAAb,MAA6B,CACzDV,KAHuB,mBAGCI,QAAOM,SOSpBqD,CAAe3D,EAAOwD,KAQ3BI,YAAY,oBAEd,4BACI3D,EAAY4D,QAAU,EACnB5D,EAAYqC,KAAI,SAACY,GAAD,OACjB,wBAAIV,IAAKU,EAAKT,IACZ,kBAAC,EAAD,CAAMS,KAAMA,QAGblD,EAAMsC,KAAI,SAACY,GAAD,OACX,wBAAIV,IAAKU,EAAKT,IACZ,kBAAC,EAAD,CAAMS,KAAMA,WC3BbY,EAAQ,WACnB,IAAMV,EAAWC,cACX3D,EAAU4D,YAAYjC,GACtBxB,EAASyD,YAAY5B,GAE3B,OACE,oCACG7B,EACG,kBAAC,EAAD,MAEA,4BACED,KAAK,SACLmE,QAAS,kBAAMX,ENWzB,uCAAO,WAAOA,GAAP,qBAAAY,EAAA,6DACLZ,ENzB+B,CAAExD,KAHf,kBM2Bb,kBDpBoBY,EAAc,eCoBlC,cAIGyD,EAJH,gBDnBqBzD,EAAa,eCmBlC,cAKG0D,EALH,iBDlBwB1D,EAAgB,kBCkBxC,QAMG2D,EANH,OAQGC,EAAsBH,EAAe3B,KAAI,SAAAnC,GAAI,kCAC9CA,GAD8C,IAEjDwC,KAAMuB,EAAeG,MAAK,SAAAC,GAAM,OAAKA,EAAO7B,KAAOtC,EAAKoE,UACxDlC,SAAU8B,EAAmBjE,QAAO,SAAAsE,GAAM,OAAKA,EAAOA,SAAWrE,EAAKoE,eAGxEnB,EHvCmC,CAAExD,KAFzB,YAE0CI,MGuCpCoE,IAClBhB,EAAStD,EAAW,WACpBsD,ELxCyB,CAAExD,KAHf,aK2BT,kDAkBHwD,EAAStD,EAAW,qCACpBsD,EL1C0B,CAAExD,KAHZ,cK0Bb,QAsBLwD,EN7CgC,CAAExD,KAHf,mBM0Bd,0DAAP,wDMVU6E,SAAU/E,EACV6C,UAAU,2BAET7C,EAAU,aAAe,UCHvBgF,EAZH,WACV,IAAMhF,EAAU4D,YAAYjC,GACtBtB,EAAUuD,YAAY/B,GAE5B,OACE,yBAAKgB,UAAU,OACb,4BAAK7C,EAAU,aAAeK,GAC9B,kBAAC,EAAD,QCNA4E,EAAO,kBACX,kBAAC,IAAD,CAAUhD,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNiD,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.04587ac5.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst IS_LOADED = 'isLoaded';\nconst FINISH_LOADED = 'notLoaded';\n\nexport const isLoaded = () => ({ type: IS_LOADED });\nexport const notLoaded = () => ({ type: FINISH_LOADED });\n\nconst reducer = (loaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADED:\n      return true;\n\n    case FINISH_LOADED:\n      return false;\n\n    default:\n      return loaded;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = (posts: any) => ({ type: SET_POSTS, posts });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_SORTED_POSTS = 'SET_SORTED_POSTS';\n\nexport const setSortedPosts = (posts: any, event: any) => ({\n  type: SET_SORTED_POSTS, posts, event,\n});\n\nconst reducer = (sortedPosts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_SORTED_POSTS:\n      return action.posts\n        .filter((item: any) => item.title.includes(action.event)\n          || item.body.includes(action.event));\n\n    default:\n      return sortedPosts;\n  }\n};\n\nexport default reducer;\n","import { Posts, User, Comment } from './interface';\n\nconst ApoUrl = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(ApoUrl + url)\n    .then(response => response.json());\n};\n\nexport const getPost = () => getAll<Posts>('/posts.json');\nexport const getUsers = () => getAll<User>('/users.json');\nexport const getComments = () => getAll<Comment>('/comments.json');\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport loadedReducer, { isLoaded, notLoaded } from './loaded';\nimport messageReducer, { setMessage } from './message';\nimport postsReducer, { setPosts } from './posts';\nimport sortedPostsReducer from './sortedPosts';\nimport { getPost, getUsers, getComments } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postsReducer,\n  sortedPosts: sortedPostsReducer,\n  loaded: loadedReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getSortedPosts = (state: RootState) => state.sortedPosts;\nexport const getIsLoaded = (state: RootState) => state.loaded;\n\nexport const loadMessage = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const postFromServer = await getPost();\n      const userFromServer = await getUsers();\n      const commentsFromServer = await getComments();\n\n      const preperedListOfPosts = postFromServer.map(item => ({\n        ...item,\n        user: userFromServer.find(itemId => (itemId.id === item.userId)),\n        comments: commentsFromServer.filter(postId => (postId.postId === item.userId)),\n      }));\n\n      dispatch(setPosts(preperedListOfPosts));\n      dispatch(setMessage('Loaded'));\n      dispatch(isLoaded());\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n      dispatch(notLoaded());\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { Comment } from '../helpers/interface';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst CommentItem: React.FC<Props> = ({ comment: { name, email, body } }) => {\n  return (\n    <>\n      <p>{name}</p>\n      <p>\n        {email}\n        {' '}\n      </p>\n      <p>{body}</p>\n    </>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport CommentItem from './CommentItem';\nimport { Comment } from '../helpers/interface';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      <ul>\n        {comments.map(comment => (\n          <li className=\"li__inside\" key={comment.id}>\n            <CommentItem comment={comment} />\n          </li>\n        ))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { User } from '../helpers/interface';\n\ntype Props = {\n  user: User;\n};\nconst UserItem: React.FC<Props> = ({ user: { name, email, address } }) => {\n  return (\n    <>\n      <p>\n        {name}\n        {' '}\n        {email}\n        {' '}\n        {address.street}\n        {' '}\n        {address.suite}\n        {' '}\n        {address.city}\n        {' '}\n        {address.zipcode}\n      </p>\n    </>\n  );\n};\n\nexport default UserItem;\n","import React from 'react';\nimport { Posts } from '../helpers/interface';\nimport CommentList from './CommentList';\nimport UserItem from './UserItem';\n\ntype Props = {\n  post: Posts;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  return (\n    <>\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n      <UserItem user={post.user} />\n      <CommentList comments={post.comments} />\n    </>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPosts, getSortedPosts } from '../store';\nimport { setSortedPosts } from '../store/sortedPosts';\nimport Post from './Post';\n\nconst PostList = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const sortedPosts = useSelector(getSortedPosts);\n\n  const handlSort = (event: any) => {\n    const text = event.target.value;\n\n    dispatch(setSortedPosts(posts, text));\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={handlSort}\n        placeholder=\"Write something\"\n      />\n      <ul>\n        {(sortedPosts.length >= 1)\n          ? (sortedPosts.map((post: any) => (\n            <li key={post.id}>\n              <Post post={post} />\n            </li>\n          )))\n          : (posts.map((post: any) => (\n            <li key={post.id}>\n              <Post post={post} />\n            </li>\n          )))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadMessage, getIsLoaded } from '../store';\nimport PostList from './PostList';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const loaded = useSelector(getIsLoaded);\n\n  return (\n    <>\n      {loaded\n        ? <PostList />\n        : (\n          <button\n            type=\"button\"\n            onClick={() => dispatch(loadMessage())}\n            disabled={loading}\n            className=\"btn btn-outline-primary\"\n          >\n            {loading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\nimport { isLoading, getMessage } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage);\n\n  return (\n    <div className=\"App\">\n      <h2>{loading ? 'Loading...' : message}</h2>\n      <Start />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}