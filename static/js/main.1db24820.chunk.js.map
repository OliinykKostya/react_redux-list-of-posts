{"version":3,"sources":["store/loading.ts","store/loaded.ts","store/message.ts","store/posts.ts","store/filteredPosts.tsx","helpers/api.ts","store/index.ts","components/CommentItem.tsx","components/CommentList.tsx","components/UserItem.tsx","components/Post.tsx","components/PostList.tsx","components/Start.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","setLoaded","boolean","loaded","setMessage","message","posts","filteredPosts","filter","item","title","includes","event","body","getAll","url","fetch","then","response","json","getPreparedPosts","a","postFromServer","userFromServer","commentsFromServer","preparedListOfPosts","map","user","find","itemId","id","userId","comments","postId","rootReducer","combineReducers","loadingReducer","messageReducer","postsReducer","filteredPostsReducer","loadedReducer","isLoading","state","getMessage","getPosts","getfilteredPosts","getIsLoaded","store","createStore","composeWithDevTools","applyMiddleware","thunk","CommentItem","comment","name","email","CommentList","className","key","UserItem","address","street","suite","city","zipcode","Post","post","PostList","dispatch","useDispatch","useSelector","onChange","text","target","value","setFilteredPosts","placeholder","length","Start","onClick","catch","disabled","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1db24820.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst IS_LOADED = 'isLoaded';\n// const FINISH_LOADED = 'notLoaded';\n\nexport const setLoaded = (boolean: boolean) => ({ type: IS_LOADED, boolean });\n\nconst reducer = (loaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADED:\n      if (action.boolean === true) {\n        return true;\n      }\n\n      return false;\n\n\n    default:\n      return loaded;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = (posts: any) => ({ type: SET_POSTS, posts });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_FILTERED_POSTS = 'SET_FILTERED_POSTS';\n\nexport const setFilteredPosts = (posts: any, event: any) => ({\n  type: SET_FILTERED_POSTS, posts, event,\n});\n\nconst reducer = (filteredPosts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_FILTERED_POSTS:\n      return action.posts\n        .filter((item: any) => item.title.includes(action.event)\n          || item.body.includes(action.event));\n\n    default:\n      return filteredPosts;\n  }\n};\n\nexport default reducer;\n","import { Posts, User, Comment } from './interface';\n\nconst ApoUrl = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(ApoUrl + url)\n    .then(response => response.json());\n};\n\nexport const getPost = () => getAll<Posts>('/posts.json');\nexport const getUsers = () => getAll<User>('/users.json');\nexport const getComments = () => getAll<Comment>('/comments.json');\n\nexport const getPreparedPosts = async () => {\n  const postFromServer = await getPost();\n  const userFromServer = await getUsers();\n  const commentsFromServer = await getComments();\n\n  const preparedListOfPosts = postFromServer.map(item => ({\n    ...item,\n    user: userFromServer.find(itemId => (itemId.id === item.userId)),\n    comments: commentsFromServer.filter(postId => (postId.postId === item.userId)),\n  }));\n\n  return preparedListOfPosts;\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport loadedReducer, { setLoaded } from './loaded';\nimport messageReducer, { setMessage } from './message';\nimport postsReducer, { setPosts } from './posts';\nimport filteredPostsReducer from './filteredPosts';\nimport { getPreparedPosts } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postsReducer,\n  filteredPosts: filteredPostsReducer,\n  loaded: loadedReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getfilteredPosts = (state: RootState) => state.filteredPosts;\nexport const getIsLoaded = (state: RootState) => state.loaded;\nexport const loadPosts = () => {\n  return (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    getPreparedPosts()\n      .then(postFromServer => {\n        dispatch(setPosts(postFromServer));\n        dispatch(setMessage('Loaded'));\n        dispatch(setLoaded(true));\n      })\n      .catch(() => {\n        dispatch(setMessage('Error occurred when loading data'));\n        dispatch(setLoaded(false));\n      });\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { Comment } from '../helpers/interface';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst CommentItem: React.FC<Props> = ({ comment: { name, email, body } }) => {\n  return (\n    <>\n      <p>{name}</p>\n      <p>\n        {email}\n        {' '}\n      </p>\n      <p>{body}</p>\n    </>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport CommentItem from './CommentItem';\nimport { Comment } from '../helpers/interface';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      <ul>\n        {comments.map(comment => (\n          <li className=\"li__inside\" key={comment.id}>\n            <CommentItem comment={comment} />\n          </li>\n        ))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { User } from '../helpers/interface';\n\ntype Props = {\n  user: User;\n};\nconst UserItem: React.FC<Props> = ({ user: { name, email, address } }) => {\n  return (\n    <>\n      <p>\n        {name}\n        {' '}\n        {email}\n        {' '}\n        {address.street}\n        {' '}\n        {address.suite}\n        {' '}\n        {address.city}\n        {' '}\n        {address.zipcode}\n      </p>\n    </>\n  );\n};\n\nexport default UserItem;\n","import React from 'react';\nimport { Posts } from '../helpers/interface';\nimport CommentList from './CommentList';\nimport UserItem from './UserItem';\n\ntype Props = {\n  post: Posts;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  return (\n    <>\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n      <UserItem user={post.user} />\n      <CommentList comments={post.comments} />\n    </>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPosts, getfilteredPosts } from '../store';\nimport { setFilteredPosts } from '../store/filteredPosts';\nimport Post from './Post';\n\nconst PostList = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const filteredPosts = useSelector(getfilteredPosts);\n\n  const handlSort = (event: any) => {\n    const text = event.target.value;\n\n    dispatch(setFilteredPosts(posts, text));\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={handlSort}\n        placeholder=\"Write something\"\n      />\n      <ul>\n        {(filteredPosts.length >= 1)\n          ? (filteredPosts.map((post: any) => (\n            <li key={post.id}>\n              <Post post={post} />\n            </li>\n          )))\n          : (posts.map((post: any) => (\n            <li key={post.id}>\n              <Post post={post} />\n            </li>\n          )))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadPosts, getIsLoaded } from '../store';\nimport PostList from './PostList';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const loaded = useSelector(getIsLoaded);\n\n  return (\n    <>\n      {loaded\n        ? <PostList />\n        : (\n          <button\n            type=\"button\"\n            onClick={() => dispatch(loadPosts())}\n            disabled={loading}\n            className=\"btn btn-outline-primary\"\n          >\n            {loading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\nimport { isLoading, getMessage } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage);\n\n  return (\n    <div className=\"App\">\n      <h2>{loading ? 'Loading...' : message}</h2>\n      <Start />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}